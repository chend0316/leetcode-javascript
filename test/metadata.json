{
  "1": {
    "name": "twoSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]",
      "size": 2,
      "orderInsensitive": true
    },
    "manual": false,
    "exampleTestcases": "[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6",
    "exampleResult": "[0,1]\n[1,2]\n[0,1]"
  },
  "2": {
    "name": "addTwoNumbers",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[2,4,3]\n[5,6,4]\n[0]\n[0]\n[9,9,9,9,9,9,9]\n[9,9,9,9]"
  },
  "3": {
    "name": "lengthOfLongestSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"\n\"\""
  },
  "4": {
    "name": "findMedianSortedArrays",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "[1,3]\n[2]\n[1,2]\n[3,4]\n[0,0]\n[0,0]\n[]\n[1]\n[2]\n[]"
  },
  "5": {
    "name": "longestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"babad\"\n\"cbbd\"\n\"a\"\n\"ac\""
  },
  "6": {
    "name": "convert",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "numRows",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"PAYPALISHIRING\"\n3\n\"PAYPALISHIRING\"\n4\n\"A\"\n1"
  },
  "7": {
    "name": "reverse",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "123\n-123\n120\n0"
  },
  "8": {
    "name": "myAtoi",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"42\"\n\"   -42\"\n\"4193 with words\"\n\"words and 987\"\n\"-91283472332\""
  },
  "9": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "121\n-121\n10\n-101"
  },
  "10": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"a*\"\n\"ab\"\n\".*\"\n\"aab\"\n\"c*a*b\"\n\"mississippi\"\n\"mis*is*p*.\""
  },
  "11": {
    "name": "maxArea",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,8,6,2,5,4,8,3,7]\n[1,1]\n[4,3,2,1,4]\n[1,2,1]",
    "exampleResult": "49\n1\n16\n2"
  },
  "12": {
    "name": "intToRoman",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n4\n9\n58\n1994"
  },
  "13": {
    "name": "romanToInt",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"III\"\n\"IV\"\n\"IX\"\n\"LVIII\"\n\"MCMXCIV\""
  },
  "14": {
    "name": "longestCommonPrefix",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]"
  },
  "15": {
    "name": "threeSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 3,
      "dealloc": true
    },
    "exampleTestcases": "[-1,0,1,2,-1,-4]\n[]\n[0]\n[-1,0,1,2,-1,-4,-2,-3,3,0,4]\n[-1,0,1,2,-1,-4,-2,-3,3,0,4]",
    "exampleResult": "[[-1,-1,2],[-1,0,1]]\n[]\n[]\n[[-4,0,4],[-4,1,3],[-3,-1,4],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]\n[[-4,0,4],[-4,1,3],[-3,-1,4],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]"
  },
  "16": {
    "name": "threeSumClosest",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-1,2,1,-4]\n1"
  },
  "17": {
    "name": "letterCombinations",
    "params": [
      {
        "name": "digits",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"23\"\n\"\"\n\"2\""
  },
  "18": {
    "name": "fourSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 4,
      "dealloc": true
    },
    "exampleTestcases": "[1,0,-1,0,-2,2]\n0\n[]\n0"
  },
  "19": {
    "name": "removeNthFromEnd",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1]\n1\n[1,2]\n1"
  },
  "20": {
    "name": "isValid",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"()\"\n\"()[]{}\"\n\"(]\"\n\"([)]\"\n\"{[]}\"\n\"[\"\n\"[\"",
    "exampleResult": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse"
  },
  "21": {
    "name": "mergeTwoLists",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,4]\n[1,3,4]\n[]\n[]\n[]\n[0]",
    "exampleResult": "[1,1,2,3,4,4]\n[]\n[0]"
  },
  "22": {
    "name": "generateParenthesis",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "3\n1",
    "exampleResult": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n[\"()\"]"
  },
  "23": {
    "name": "mergeKLists",
    "params": [
      {
        "name": "lists",
        "type": "ListNode[]",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[[1,4,5],[1,3,4],[2,6]]\n[]\n[[]]"
  },
  "24": {
    "name": "swapPairs",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4]\n[]\n[1]",
    "exampleResult": "[2,1,4,3]\n[]\n[1]"
  },
  "25": {
    "name": "reverseKGroup",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1,2,3,4,5]\n3\n[1,2,3,4,5]\n1\n[1]\n1",
    "exampleResult": "[2,1,4,3,5]\n[3,2,1,4,5]\n[1,2,3,4,5]\n[1]"
  },
  "26": {
    "name": "removeDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[1,1,2]\n[0,0,1,1,1,2,2,3,3,4]",
    "exampleResult": "[1,2]\n[0,1,2,3,4]"
  },
  "27": {
    "name": "removeElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "val",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[3,2,2,3]\n3\n[0,1,2,2,3,0,4,2]\n2",
    "exampleResult": "[2,2]\n[0,1,3,0,4]"
  },
  "28": {
    "name": "strStr",
    "params": [
      {
        "name": "haystack",
        "type": "string"
      },
      {
        "name": "needle",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"hello\"\n\"ll\"\n\"aaaaa\"\n\"bba\"\n\"\"\n\"\""
  },
  "29": {
    "name": "divide",
    "params": [
      {
        "name": "dividend",
        "type": "integer"
      },
      {
        "name": "divisor",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "10\n3\n7\n-3\n0\n1\n1\n1"
  },
  "30": {
    "name": "findSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]\n\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]\n\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]"
  },
  "31": {
    "name": "nextPermutation",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3]\n[3,2,1]\n[1,1,5]\n[1]"
  },
  "32": {
    "name": "longestValidParentheses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"(()\"\n\")()())\"\n\"\""
  },
  "33": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[4,5,6,7,0,1,2]\n0\n[4,5,6,7,0,1,2]\n3\n[1]\n0"
  },
  "34": {
    "name": "searchRange",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[5,7,7,8,8,10]\n8\n[5,7,7,8,8,10]\n6\n[]\n0"
  },
  "35": {
    "name": "searchInsert",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,5,6]\n5\n[1,3,5,6]\n2\n[1,3,5,6]\n7\n[1,3,5,6]\n0\n[1]\n0"
  },
  "36": {
    "name": "isValidSudoku",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
  },
  "37": {
    "name": "solveSudoku",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
  },
  "38": {
    "name": "countAndSay",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n4"
  },
  "39": {
    "name": "combinationSum",
    "params": [
      {
        "name": "candidates",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[2,3,6,7]\n7\n[2,3,5]\n8\n[2]\n1\n[1]\n1\n[1]\n2"
  },
  "40": {
    "name": "combinationSum2",
    "params": [
      {
        "name": "candidates",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[10,1,2,7,6,1,5]\n8\n[2,5,2,1,2]\n5"
  },
  "41": {
    "name": "firstMissingPositive",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]"
  },
  "42": {
    "name": "trap",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[0,1,0,2,1,0,1,3,2,1,2,1]\n[4,2,0,3,2,5]",
    "exampleResult": "6\n9"
  },
  "43": {
    "name": "multiply",
    "params": [
      {
        "name": "num1",
        "type": "string"
      },
      {
        "name": "num2",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"2\"\n\"3\"\n\"123\"\n\"456\""
  },
  "44": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"*\"\n\"cb\"\n\"?a\"\n\"adceb\"\n\"*a*b\"\n\"acdcb\"\n\"a*c?b\""
  },
  "45": {
    "name": "jump",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,3,1,1,4]\n[2,3,0,1,4]"
  },
  "46": {
    "name": "permute",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3]\n[0,1]\n[1]"
  },
  "47": {
    "name": "permuteUnique",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    },
    "exampleTestcases": "[1,1,2]\n[1,2,3]"
  },
  "48": {
    "name": "rotate",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n[[1]]\n[[1,2],[3,4]]"
  },
  "49": {
    "name": "groupAnagrams",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "dealloc": true
    },
    "exampleTestcases": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n[\"\"]\n[\"a\"]",
    "exampleResult": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]\n[[\"\"]]\n[[\"a\"]]"
  },
  "50": {
    "name": "myPow",
    "params": [
      {
        "name": "x",
        "type": "double"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "2.00000\n10\n2.10000\n3\n2.00000\n-2"
  },
  "51": {
    "name": "solveNQueens",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "colsize": "param_1",
      "dealloc": true
    },
    "exampleTestcases": "4\n1"
  },
  "52": {
    "name": "totalNQueens",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "4\n1"
  },
  "53": {
    "name": "maxSubArray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]"
  },
  "54": {
    "name": "spiralOrder",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "list<integer>",
      "size": "size_1 * col_size_1",
      "dealloc": true
    },
    "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[1,2,3,4],[5,6,7,8],[9,10,11,12]]"
  },
  "55": {
    "name": "canJump",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,3,1,1,4]\n[3,2,1,0,4]"
  },
  "56": {
    "name": "merge",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": "[[1,3],[2,6],[8,10],[15,18]]\n[[1,4],[4,5]]"
  },
  "57": {
    "name": "insert",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      },
      {
        "name": "newInterval",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": "[[1,3],[6,9]]\n[2,5]\n[[1,2],[3,5],[6,7],[8,10],[12,16]]\n[4,8]\n[]\n[5,7]\n[[1,5]]\n[2,3]\n[[1,5]]\n[2,7]"
  },
  "58": {
    "name": "lengthOfLastWord",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"Hello World\"\n\" \""
  },
  "59": {
    "name": "generateMatrix",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[][]",
      "rowsize": "param_1",
      "colsize": "param_1",
      "dealloc": true
    },
    "exampleTestcases": "3\n1"
  },
  "60": {
    "name": "getPermutation",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n3\n4\n9\n3\n1"
  },
  "61": {
    "name": "rotateRight",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[0,1,2]\n4"
  },
  "62": {
    "name": "uniquePaths",
    "params": [
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n7\n3\n2\n7\n3\n3\n3"
  },
  "63": {
    "name": "uniquePathsWithObstacles",
    "params": [
      {
        "name": "obstacleGrid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[0,0,0],[0,1,0],[0,0,0]]\n[[0,1],[0,0]]"
  },
  "64": {
    "name": "minPathSum",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,3,1],[1,5,1],[4,2,1]]\n[[1,2,3],[4,5,6]]"
  },
  "65": {
    "name": "isNumber",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"0\"\n\"e\"\n\".\"\n\".1\""
  },
  "66": {
    "name": "plusOne",
    "params": [
      {
        "name": "digits",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,2,3]\n[4,3,2,1]\n[0]",
    "exampleResult": "[1,2,4]\n[4,3,2,2]\n[1]"
  },
  "67": {
    "name": "addBinary",
    "params": [
      {
        "name": "a",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"11\"\n\"1\"\n\"1010\"\n\"1011\""
  },
  "68": {
    "name": "fullJustify",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      },
      {
        "name": "maxWidth",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16\n[\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n16\n[\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n20"
  },
  "69": {
    "name": "mySqrt",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "4\n8"
  },
  "70": {
    "name": "climbStairs",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n3",
    "exampleResult": "2\n3"
  },
  "71": {
    "name": "simplifyPath",
    "params": [
      {
        "name": "path",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"/home/\"\n\"/../\"\n\"/home//foo/\"\n\"/a/./b/../../c/\""
  },
  "72": {
    "name": "minDistance",
    "params": [
      {
        "name": "word1",
        "type": "string"
      },
      {
        "name": "word2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"horse\"\n\"ros\"\n\"intention\"\n\"execution\""
  },
  "73": {
    "name": "setZeroes",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[1,1,1],[1,0,1],[1,1,1]]\n[[0,1,2,0],[3,4,5,2],[1,3,1,5]]"
  },
  "74": {
    "name": "searchMatrix",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n3\n[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n13"
  },
  "75": {
    "name": "sortColors",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[2,0,2,1,1,0]\n[2,0,1]\n[0]\n[1]"
  },
  "76": {
    "name": "minWindow",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"ADOBECODEBANC\"\n\"ABC\"\n\"a\"\n\"a\""
  },
  "77": {
    "name": "combine",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "4\n2\n1\n1"
  },
  "78": {
    "name": "subsets",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3]\n[0]"
  },
  "79": {
    "name": "exist",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      },
      {
        "name": "word",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"ABCCED\"\n[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"SEE\"\n[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"ABCB\""
  },
  "80": {
    "name": "removeDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[1,1,1,2,2,3]\n[0,0,1,1,1,1,2,3,3]"
  },
  "81": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,5,6,0,0,1,2]\n0\n[2,5,6,0,0,1,2]\n3"
  },
  "82": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,3,4,4,5]\n[1,1,1,2,3]"
  },
  "83": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,1,2]\n[1,1,2,3,3]"
  },
  "84": {
    "name": "largestRectangleArea",
    "params": [
      {
        "name": "heights",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,1,5,6,2,3]\n[2,4]"
  },
  "85": {
    "name": "maximalRectangle",
    "params": [
      {
        "name": "matrix",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n[]\n[[\"0\"]]\n[[\"1\"]]\n[[\"0\",\"0\"]]"
  },
  "86": {
    "name": "partition",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,4,3,2,5,2]\n3\n[2,1]\n2"
  },
  "87": {
    "name": "isScramble",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"great\"\n\"rgeat\"\n\"abcde\"\n\"caebd\"\n\"a\"\n\"a\""
  },
  "88": {
    "name": "merge",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]",
        "implicitsizeparam": false
      },
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "nums2",
        "type": "integer[]",
        "implicitsizeparam": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,0,0,0]\n3\n[2,5,6]\n3\n[1]\n1\n[]\n0"
  },
  "89": {
    "name": "grayCode",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "2\n1"
  },
  "90": {
    "name": "subsetsWithDup",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,2]\n[0]"
  },
  "91": {
    "name": "numDecodings",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"12\"\n\"226\"\n\"0\"\n\"06\""
  },
  "92": {
    "name": "reverseBetween",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "left",
        "type": "integer"
      },
      {
        "name": "right",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n4\n[5]\n1\n1"
  },
  "93": {
    "name": "restoreIpAddresses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"25525511135\"\n\"0000\"\n\"1111\"\n\"010010\"\n\"101023\""
  },
  "94": {
    "name": "inorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]"
  },
  "95": {
    "name": "generateTrees",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<TreeNode>"
    },
    "exampleTestcases": "3\n1"
  },
  "96": {
    "name": "numTrees",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n1"
  },
  "97": {
    "name": "isInterleave",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      },
      {
        "name": "s3",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aabcc\"\n\"dbbca\"\n\"aadbbcbcac\"\n\"aabcc\"\n\"dbbca\"\n\"aadbbbaccc\"\n\"\"\n\"\"\n\"\""
  },
  "98": {
    "name": "isValidBST",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,1,3]\n[5,1,4,null,null,3,6]"
  },
  "99": {
    "name": "recoverTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,3,null,null,2]\n[3,1,4,null,null,2]"
  },
  "100": {
    "name": "isSameTree",
    "params": [
      {
        "name": "p",
        "type": "TreeNode"
      },
      {
        "name": "q",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3]\n[1,2,3]\n[1,2]\n[1,null,2]\n[1,2,1]\n[1,1,2]"
  },
  "101": {
    "name": "isSymmetric",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,2,3,4,4,3]\n[1,2,2,null,3,null,3]"
  },
  "102": {
    "name": "levelOrder",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1]\n[]"
  },
  "103": {
    "name": "zigzagLevelOrder",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1]\n[]"
  },
  "104": {
    "name": "maxDepth",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1,null,2]\n[]\n[0]"
  },
  "105": {
    "name": "buildTree",
    "params": [
      {
        "name": "preorder",
        "type": "integer[]"
      },
      {
        "name": "inorder",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,15,7]\n[9,3,15,20,7]\n[-1]\n[-1]"
  },
  "106": {
    "name": "buildTree",
    "params": [
      {
        "name": "inorder",
        "type": "integer[]"
      },
      {
        "name": "postorder",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[9,3,15,20,7]\n[9,15,7,20,3]\n[-1]\n[-1]"
  },
  "107": {
    "name": "levelOrderBottom",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1]\n[]"
  },
  "108": {
    "name": "sortedArrayToBST",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[-10,-3,0,5,9]\n[1,3]"
  },
  "109": {
    "name": "sortedListToBST",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[-10,-3,0,5,9]\n[]\n[0]\n[1,3]"
  },
  "110": {
    "name": "isBalanced",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1,2,2,3,3,null,null,4,4]\n[]"
  },
  "111": {
    "name": "minDepth",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[2,null,3,null,4,null,5,null,6]"
  },
  "112": {
    "name": "hasPathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "targetSum",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[5,4,8,11,null,13,4,7,2,null,null,null,1]\n22\n[1,2,3]\n5\n[1,2]\n0"
  },
  "113": {
    "name": "pathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "targetSum",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[5,4,8,11,null,13,4,7,2,null,null,5,1]\n22\n[1,2,3]\n5\n[1,2]\n0"
  },
  "114": {
    "name": "flatten",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,5,3,4,null,6]\n[]\n[0]"
  },
  "115": {
    "name": "numDistinct",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"rabbbit\"\n\"rabbit\"\n\"babgbag\"\n\"bag\""
  },
  "116": {
    "name": "connect",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "structures": [
      {
        "name": "TreeNode",
        "comment": "Definition for a Node.",
        "members": [
          {
            "name": "val",
            "type": "integer"
          },
          {
            "name": "left",
            "type": "TreeNode"
          },
          {
            "name": "right",
            "type": "TreeNode"
          },
          {
            "name": "next",
            "type": "TreeNode"
          }
        ]
      }
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "swift",
      "golang",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[1,2,3,4,5,6,7]"
  },
  "117": {
    "name": "connect",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[1,2,3,4,5,null,7]"
  },
  "118": {
    "name": "generate",
    "params": [
      {
        "name": "numRows",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true,
      "rowsize": "param_1"
    },
    "exampleTestcases": "5\n1"
  },
  "119": {
    "name": "getRow",
    "params": [
      {
        "name": "rowIndex",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "3\n0\n1"
  },
  "120": {
    "name": "minimumTotal",
    "params": [
      {
        "name": "triangle",
        "type": "list<list<integer>>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[2],[3,4],[6,5,7],[4,1,8,3]]\n[[-10]]"
  },
  "121": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[7,1,5,3,6,4]\n[7,6,4,3,1]"
  },
  "122": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[7,1,5,3,6,4]\n[1,2,3,4,5]\n[7,6,4,3,1]"
  },
  "123": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,3,5,0,0,3,1,4]\n[1,2,3,4,5]\n[7,6,4,3,1]\n[1]"
  },
  "124": {
    "name": "maxPathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[-10,9,20,null,null,15,7]"
  },
  "125": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"A man, a plan, a canal: Panama\"\n\"race a car\""
  },
  "126": {
    "name": "findLadders",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "list<list<string>>"
    },
    "exampleTestcases": "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
  },
  "127": {
    "name": "ladderLength",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
  },
  "128": {
    "name": "longestConsecutive",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[100,4,200,1,3,2]\n[0,3,7,2,5,8,4,6,0,1]"
  },
  "129": {
    "name": "sumNumbers",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[4,9,0,5,1]"
  },
  "130": {
    "name": "solve",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n[[\"X\"]]"
  },
  "131": {
    "name": "partition",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "dealloc": true
    },
    "exampleTestcases": "\"aab\"\n\"a\""
  },
  "132": {
    "name": "minCut",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"aab\"\n\"a\"\n\"ab\""
  },
  "133": {
    "name": "cloneGraph",
    "params": [
      {
        "name": "edges",
        "type": "integer[][]"
      },
      {
        "type": "integer",
        "name": "source"
      },
      {
        "type": "integer",
        "name": "destination"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[[2,4],[1,3],[2,4],[1,3]]\n[[]]\n[]\n[[2],[1]]\n[[2,3],[1,3],[1,2]]\n[[2,3,4],[1,3,4],[1,2,4],[1,2,3]]\n[[2,3,4,5],[1,3,4,5],[1,2,4,5],[1,2,3,5],[1,2,3,4]]\n[[2,3,4,5,6],[1,3,4,5,6],[1,2,4,5,6],[1,2,3,5,6],[1,2,3,4,6],[1,2,3,4,5]]\n[[2,3,4,5,6,7],[1,3,4,5,6,7],[1,2,4,5,6,7],[1,2,3,5,6,7],[1,2,3,4,6,7],[1,2,3,4,5,7],[1,2,3,4,5,6]]\n[[2,3,4,5,6,7,8],[1,3,4,5,6,7,8],[1,2,4,5,6,7,8],[1,2,3,5,6,7,8],[1,2,3,4,6,7,8],[1,2,3,4,5,7,8],[1,2,3,4,5,6,8],[1,2,3,4,5,6,7]]\n[[2,3,4,5,6,7,8,9],[1,3,4,5,6,7,8,9],[1,2,4,5,6,7,8,9],[1,2,3,5,6,7,8,9],[1,2,3,4,6,7,8,9],[1,2,3,4,5,7,8,9],[1,2,3,4,5,6,8,9],[1,2,3,4,5,6,7,9],[1,2,3,4,5,6,7,8]]\n[[2,3,4,5,6,7,8,9,10],[1,3,4,5,6,7,8,9,10],[1,2,4,5,6,7,8,9,10],[1,2,3,5,6,7,8,9,10],[1,2,3,4,6,7,8,9,10],[1,2,3,4,5,7,8,9,10],[1,2,3,4,5,6,8,9,10],[1,2,3,4,5,6,7,9,10],[1,2,3,4,5,6,7,8,10],[1,2,3,4,5,6,7,8,9]]"
  },
  "134": {
    "name": "canCompleteCircuit",
    "params": [
      {
        "name": "gas",
        "type": "integer[]"
      },
      {
        "name": "cost",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4,5]\n[3,4,5,1,2]\n[2,3,4]\n[3,4,3]"
  },
  "135": {
    "name": "candy",
    "params": [
      {
        "name": "ratings",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,0,2]\n[1,2,2]"
  },
  "136": {
    "name": "singleNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,2,1]\n[4,1,2,1,2]\n[1]"
  },
  "137": {
    "name": "singleNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,2,3,2]\n[0,1,0,1,0,1,99]"
  },
  "138": {
    "name": "copyRandomList",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[[7,null],[13,0],[11,4],[10,2],[1,0]]\n[[1,1],[2,1]]\n[[3,null],[3,0],[3,null]]\n[]"
  },
  "139": {
    "name": "wordBreak",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "wordDict",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"leetcode\"\n[\"leet\",\"code\"]\n\"applepenapple\"\n[\"apple\",\"pen\"]\n\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
  },
  "140": {
    "name": "wordBreak",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "wordDict",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "list<string>",
      "dealloc": true
    },
    "exampleTestcases": "\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n\"pineapplepenapple\"\n[\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
  },
  "141": {
    "name": "hasCycle",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "pos",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "manual": true,
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "ruby",
      "swift",
      "golang",
      "python3",
      "scala",
      "kotlin",
      "php",
      "typescript"
    ],
    "exampleTestcases": "[3,2,0,-4]\n1\n[1,2]\n0\n[1]\n-1"
  },
  "142": {
    "name": "detectCycle",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "pos",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "golang",
      "python3",
      "swift",
      "kotlin",
      "php",
      "ruby",
      "scala",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[3,2,0,-4]\n1\n[1,2]\n0\n[1]\n-1"
  },
  "143": {
    "name": "reorderList",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,4]\n[1,2,3,4,5]"
  },
  "144": {
    "name": "preorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]"
  },
  "145": {
    "name": "postorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]"
  },
  "146": {
    "classname": "LRUCache",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "capacity"
        }
      ]
    },
    "methods": [
      {
        "name": "get",
        "params": [
          {
            "type": "integer",
            "name": "key"
          }
        ],
        "return": {
          "type": "integer"
        }
      },
      {
        "name": "put",
        "params": [
          {
            "type": "integer",
            "name": "key"
          },
          {
            "type": "integer",
            "name": "value"
          }
        ],
        "return": {
          "type": "void"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]"
  },
  "147": {
    "name": "insertionSortList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[4,2,1,3]\n[-1,5,3,4,0]"
  },
  "148": {
    "name": "sortList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[4,2,1,3]\n[-1,5,3,4,0]\n[]"
  },
  "149": {
    "name": "maxPoints",
    "params": [
      {
        "name": "points",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]"
  },
  "150": {
    "name": "evalRPN",
    "params": [
      {
        "name": "tokens",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[\"2\",\"1\",\"+\",\"3\",\"*\"]\n[\"4\",\"13\",\"5\",\"/\",\"+\"]\n[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]"
  },
  "151": {
    "name": "reverseWords",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"the sky is blue\"\n\"  hello world  \"\n\"a good   example\"\n\"  Bob    Loves  Alice   \"\n\"Alice does not even like bob\""
  },
  "152": {
    "name": "maxProduct",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,3,-2,4]\n[-2,0,-1]"
  },
  "153": {
    "name": "findMin",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,4,5,1,2]\n[4,5,6,7,0,1,2]\n[11,13,15,17]"
  },
  "154": {
    "name": "findMin",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,5]\n[2,2,2,0,1]"
  },
  "155": {
    "classname": "MinStack",
    "maxbytesperline": 130000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "maxSize",
          "lang": "c",
          "value": "64000"
        }
      ],
      "comment": "initialize your data structure here."
    },
    "methods": [
      {
        "name": "push",
        "params": [
          {
            "type": "integer",
            "name": "x"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "pop",
        "params": [],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "top",
        "params": [],
        "return": {
          "type": "integer"
        }
      },
      {
        "name": "getMin",
        "params": [],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]"
  },
  "160": {
    "name": "getIntersectionNode",
    "params": [
      {
        "name": "intersectVal",
        "type": "integer"
      },
      {
        "name": "listA",
        "type": "ListNode"
      },
      {
        "name": "listB",
        "type": "ListNode"
      },
      {
        "name": "skipA",
        "type": "integer"
      },
      {
        "name": "skipB",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "golang",
      "python3",
      "swift",
      "ruby",
      "kotlin",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "8\n[4,1,8,4,5]\n[5,6,1,8,4,5]\n2\n3\n2\n[1,9,1,2,4]\n[3,2,4]\n3\n1\n0\n[2,6,4]\n[1,5]\n3\n2"
  },
  "162": {
    "name": "findPeakElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,1]\n[1,2,1,3,5,6,4]"
  },
  "164": {
    "name": "maximumGap",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,6,9,1]\n[10]"
  },
  "165": {
    "name": "compareVersion",
    "params": [
      {
        "name": "version1",
        "type": "string"
      },
      {
        "name": "version2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"1.01\"\n\"1.001\"\n\"1.0\"\n\"1.0.0\"\n\"0.1\"\n\"1.1\"\n\"1.0.1\"\n\"1\"\n\"7.5.2.4\"\n\"7.5.3\""
  },
  "166": {
    "name": "fractionToDecimal",
    "params": [
      {
        "name": "numerator",
        "type": "integer"
      },
      {
        "name": "denominator",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n2\n2\n1\n2\n3\n4\n333\n1\n5"
  },
  "167": {
    "name": "twoSum",
    "params": [
      {
        "name": "numbers",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[2,7,11,15]\n9\n[2,3,4]\n6\n[-1,0]\n-1"
  },
  "168": {
    "name": "convertToTitle",
    "params": [
      {
        "name": "columnNumber",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n28\n701\n2147483647"
  },
  "169": {
    "name": "majorityElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,2,3]\n[2,2,1,1,1,2,2]"
  },
  "171": {
    "name": "titleToNumber",
    "params": [
      {
        "name": "columnTitle",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"A\"\n\"AB\"\n\"ZY\"\n\"FXSHRXW\""
  },
  "172": {
    "name": "trailingZeroes",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n5\n0"
  },
  "173": {
    "classname": "BSTIterator",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "TreeNode",
          "name": "root"
        }
      ]
    },
    "methods": [
      {
        "params": [],
        "name": "next",
        "return": {
          "type": "integer"
        }
      },
      {
        "params": [],
        "name": "hasNext",
        "return": {
          "type": "boolean"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]",
      "dealloc": true
    },
    "manual": false,
    "exampleTestcases": "[\"BSTIterator\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\n[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]"
  },
  "174": {
    "name": "calculateMinimumHP",
    "params": [
      {
        "name": "dungeon",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "179": {
    "name": "largestNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[10,2]\n[3,30,34,5,9]\n[1]\n[10]"
  },
  "187": {
    "name": "findRepeatedDnaSequences",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n\"AAAAAAAAAAAAA\""
  },
  "188": {
    "name": "maxProfit",
    "params": [
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n[2,4,1]\n2\n[3,2,6,5,0,3]"
  },
  "189": {
    "name": "rotate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,4,5,6,7]\n3\n[-1,-100,3,99]\n2"
  },
  "190": {
    "name": "reverseBits",
    "params": [
      {
        "name": "n",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "00000010100101000001111010011100\n11111111111111111111111111111101"
  },
  "191": {
    "name": "hammingWeight",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "00000000000000000000000000001011\n00000000000000000000000010000000\n11111111111111111111111111111101"
  },
  "198": {
    "name": "rob",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,1]\n[2,7,9,3,1]"
  },
  "199": {
    "name": "rightSideView",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,null,5,null,4]\n[1,null,3]\n[]"
  },
  "200": {
    "name": "numIslands",
    "params": [
      {
        "name": "grid",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\n[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]"
  },
  "434": {
    "name": "countSegments",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"Hello, my name is John\"\n\"Hello\"\n\"love live! mu'sic forever\"\n\"\""
  },
  "543": {
    "name": "diameterOfBinaryTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4,5]\n[1,2]"
  }
}
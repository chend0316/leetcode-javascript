{
  "1": {
    "name": "twoSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]",
      "size": 2
    },
    "manual": false,
    "exampleTestcases": "[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6"
  },
  "2": {
    "name": "addTwoNumbers",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[2,4,3]\n[5,6,4]\n[0]\n[0]\n[9,9,9,9,9,9,9]\n[9,9,9,9]"
  },
  "3": {
    "name": "lengthOfLongestSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"\n\"\""
  },
  "4": {
    "name": "findMedianSortedArrays",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "[1,3]\n[2]\n[1,2]\n[3,4]\n[0,0]\n[0,0]\n[]\n[1]\n[2]\n[]"
  },
  "5": {
    "name": "longestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"babad\"\n\"cbbd\"\n\"a\"\n\"ac\""
  },
  "6": {
    "name": "convert",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "numRows",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"PAYPALISHIRING\"\n3\n\"PAYPALISHIRING\"\n4\n\"A\"\n1"
  },
  "7": {
    "name": "reverse",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "123\n-123\n120\n0"
  },
  "8": {
    "name": "myAtoi",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"42\"\n\"   -42\"\n\"4193 with words\"\n\"words and 987\"\n\"-91283472332\""
  },
  "9": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "121\n-121\n10\n-101"
  },
  "10": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"a*\"\n\"ab\"\n\".*\"\n\"aab\"\n\"c*a*b\"\n\"mississippi\"\n\"mis*is*p*.\""
  },
  "11": {
    "name": "maxArea",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,8,6,2,5,4,8,3,7]\n[1,1]\n[4,3,2,1,4]\n[1,2,1]"
  },
  "12": {
    "name": "intToRoman",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n4\n9\n58\n1994"
  },
  "13": {
    "name": "romanToInt",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"III\"\n\"IV\"\n\"IX\"\n\"LVIII\"\n\"MCMXCIV\""
  },
  "14": {
    "name": "longestCommonPrefix",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]"
  },
  "15": {
    "name": "threeSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 3,
      "dealloc": true
    },
    "exampleTestcases": "[-1,0,1,2,-1,-4]\n[]\n[0]"
  },
  "16": {
    "name": "threeSumClosest",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-1,2,1,-4]\n1"
  },
  "17": {
    "name": "letterCombinations",
    "params": [
      {
        "name": "digits",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"23\"\n\"\"\n\"2\""
  },
  "18": {
    "name": "fourSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 4,
      "dealloc": true
    },
    "exampleTestcases": "[1,0,-1,0,-2,2]\n0\n[]\n0"
  },
  "19": {
    "name": "removeNthFromEnd",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1]\n1\n[1,2]\n1"
  },
  "20": {
    "name": "isValid",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"()\"\n\"()[]{}\"\n\"(]\"\n\"([)]\"\n\"{[]}\""
  },
  "21": {
    "name": "mergeTwoLists",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,4]\n[1,3,4]\n[]\n[]\n[]\n[0]"
  },
  "22": {
    "name": "generateParenthesis",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "3\n1"
  },
  "23": {
    "name": "mergeKLists",
    "params": [
      {
        "name": "lists",
        "type": "ListNode[]",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[[1,4,5],[1,3,4],[2,6]]\n[]\n[[]]"
  },
  "24": {
    "name": "swapPairs",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4]\n[]\n[1]"
  },
  "25": {
    "name": "reverseKGroup",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1,2,3,4,5]\n3\n[1,2,3,4,5]\n1\n[1]\n1"
  },
  "26": {
    "name": "removeDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[1,1,2]\n[0,0,1,1,1,2,2,3,3,4]"
  },
  "27": {
    "name": "removeElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "val",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[3,2,2,3]\n3\n[0,1,2,2,3,0,4,2]\n2"
  },
  "28": {
    "name": "strStr",
    "params": [
      {
        "name": "haystack",
        "type": "string"
      },
      {
        "name": "needle",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"hello\"\n\"ll\"\n\"aaaaa\"\n\"bba\"\n\"\"\n\"\""
  },
  "29": {
    "name": "divide",
    "params": [
      {
        "name": "dividend",
        "type": "integer"
      },
      {
        "name": "divisor",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "10\n3\n7\n-3\n0\n1\n1\n1"
  },
  "30": {
    "name": "findSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]\n\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]\n\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]"
  },
  "31": {
    "name": "nextPermutation",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3]\n[3,2,1]\n[1,1,5]\n[1]"
  },
  "32": {
    "name": "longestValidParentheses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"(()\"\n\")()())\"\n\"\""
  },
  "34": {
    "name": "searchRange",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[5,7,7,8,8,10]\n8\n[5,7,7,8,8,10]\n6\n[]\n0"
  },
  "35": {
    "name": "searchInsert",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,5,6]\n5\n[1,3,5,6]\n2\n[1,3,5,6]\n7\n[1,3,5,6]\n0\n[1]\n0"
  },
  "36": {
    "name": "isValidSudoku",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
  },
  "37": {
    "name": "solveSudoku",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
  },
  "38": {
    "name": "countAndSay",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n4"
  },
  "39": {
    "name": "combinationSum",
    "params": [
      {
        "name": "candidates",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[2,3,6,7]\n7\n[2,3,5]\n8\n[2]\n1\n[1]\n1\n[1]\n2"
  },
  "40": {
    "name": "combinationSum2",
    "params": [
      {
        "name": "candidates",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[10,1,2,7,6,1,5]\n8\n[2,5,2,1,2]\n5"
  },
  "41": {
    "name": "firstMissingPositive",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]"
  },
  "44": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"*\"\n\"cb\"\n\"?a\"\n\"adceb\"\n\"*a*b\"\n\"acdcb\"\n\"a*c?b\""
  },
  "45": {
    "name": "jump",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,3,1,1,4]\n[2,3,0,1,4]"
  },
  "46": {
    "name": "permute",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3]\n[0,1]\n[1]"
  },
  "47": {
    "name": "permuteUnique",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    },
    "exampleTestcases": "[1,1,2]\n[1,2,3]"
  },
  "48": {
    "name": "rotate",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n[[1]]\n[[1,2],[3,4]]"
  },
  "49": {
    "name": "groupAnagrams",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "dealloc": true
    },
    "exampleTestcases": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n[\"\"]\n[\"a\"]"
  },
  "50": {
    "name": "myPow",
    "params": [
      {
        "name": "x",
        "type": "double"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "2.00000\n10\n2.10000\n3\n2.00000\n-2"
  },
  "52": {
    "name": "totalNQueens",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "4\n1"
  },
  "53": {
    "name": "maxSubArray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]"
  },
  "55": {
    "name": "canJump",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,3,1,1,4]\n[3,2,1,0,4]"
  },
  "56": {
    "name": "merge",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": "[[1,3],[2,6],[8,10],[15,18]]\n[[1,4],[4,5]]"
  },
  "57": {
    "name": "insert",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      },
      {
        "name": "newInterval",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": "[[1,3],[6,9]]\n[2,5]\n[[1,2],[3,5],[6,7],[8,10],[12,16]]\n[4,8]\n[]\n[5,7]\n[[1,5]]\n[2,3]\n[[1,5]]\n[2,7]"
  },
  "58": {
    "name": "lengthOfLastWord",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"Hello World\"\n\" \""
  },
  "59": {
    "name": "generateMatrix",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[][]",
      "rowsize": "param_1",
      "colsize": "param_1",
      "dealloc": true
    },
    "exampleTestcases": "3\n1"
  },
  "60": {
    "name": "getPermutation",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n3\n4\n9\n3\n1"
  },
  "61": {
    "name": "rotateRight",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[0,1,2]\n4"
  },
  "62": {
    "name": "uniquePaths",
    "params": [
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n7\n3\n2\n7\n3\n3\n3"
  },
  "63": {
    "name": "uniquePathsWithObstacles",
    "params": [
      {
        "name": "obstacleGrid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[0,0,0],[0,1,0],[0,0,0]]\n[[0,1],[0,0]]"
  },
  "64": {
    "name": "minPathSum",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,3,1],[1,5,1],[4,2,1]]\n[[1,2,3],[4,5,6]]"
  },
  "65": {
    "name": "isNumber",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"0\"\n\"e\"\n\".\"\n\".1\""
  },
  "67": {
    "name": "addBinary",
    "params": [
      {
        "name": "a",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"11\"\n\"1\"\n\"1010\"\n\"1011\""
  },
  "69": {
    "name": "mySqrt",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "4\n8"
  },
  "70": {
    "name": "climbStairs",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n3"
  },
  "72": {
    "name": "minDistance",
    "params": [
      {
        "name": "word1",
        "type": "string"
      },
      {
        "name": "word2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"horse\"\n\"ros\"\n\"intention\"\n\"execution\""
  },
  "74": {
    "name": "searchMatrix",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n3\n[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n13"
  },
  "80": {
    "name": "removeDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[1,1,1,2,2,3]\n[0,0,1,1,1,1,2,3,3]"
  },
  "82": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,3,4,4,5]\n[1,1,1,2,3]"
  },
  "87": {
    "name": "isScramble",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"great\"\n\"rgeat\"\n\"abcde\"\n\"caebd\"\n\"a\"\n\"a\""
  },
  "88": {
    "name": "merge",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]",
        "implicitsizeparam": false
      },
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "nums2",
        "type": "integer[]",
        "implicitsizeparam": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,0,0,0]\n3\n[2,5,6]\n3\n[1]\n1\n[]\n0"
  },
  "89": {
    "name": "grayCode",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "2\n1"
  },
  "90": {
    "name": "subsetsWithDup",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,2]\n[0]"
  },
  "94": {
    "name": "inorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]"
  },
  "95": {
    "name": "generateTrees",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<TreeNode>"
    },
    "exampleTestcases": "3\n1"
  },
  "97": {
    "name": "isInterleave",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      },
      {
        "name": "s3",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aabcc\"\n\"dbbca\"\n\"aadbbcbcac\"\n\"aabcc\"\n\"dbbca\"\n\"aadbbbaccc\"\n\"\"\n\"\"\n\"\""
  },
  "99": {
    "name": "recoverTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,3,null,null,2]\n[3,1,4,null,null,2]"
  },
  "100": {
    "name": "isSameTree",
    "params": [
      {
        "name": "p",
        "type": "TreeNode"
      },
      {
        "name": "q",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3]\n[1,2,3]\n[1,2]\n[1,null,2]\n[1,2,1]\n[1,1,2]"
  },
  "434": {
    "name": "countSegments",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"Hello, my name is John\"\n\"Hello\"\n\"love live! mu'sic forever\"\n\"\""
  },
  "543": {
    "name": "diameterOfBinaryTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4,5]\n[1,2]"
  }
}
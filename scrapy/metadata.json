{
  "1": {
    "name": "twoSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]",
      "size": 2
    },
    "manual": false,
    "exampleTestcases": "[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6"
  },
  "2": {
    "name": "addTwoNumbers",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[2,4,3]\n[5,6,4]\n[0]\n[0]\n[9,9,9,9,9,9,9]\n[9,9,9,9]"
  },
  "3": {
    "name": "lengthOfLongestSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"\n\"\""
  },
  "4": {
    "name": "findMedianSortedArrays",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "[1,3]\n[2]\n[1,2]\n[3,4]\n[0,0]\n[0,0]\n[]\n[1]\n[2]\n[]"
  },
  "5": {
    "name": "longestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"babad\"\n\"cbbd\"\n\"a\"\n\"ac\""
  },
  "6": {
    "name": "convert",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "numRows",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"PAYPALISHIRING\"\n3\n\"PAYPALISHIRING\"\n4\n\"A\"\n1"
  },
  "7": {
    "name": "reverse",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "123\n-123\n120\n0"
  },
  "8": {
    "name": "myAtoi",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"42\"\n\"   -42\"\n\"4193 with words\"\n\"words and 987\"\n\"-91283472332\""
  },
  "9": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "121\n-121\n10\n-101"
  },
  "10": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"a*\"\n\"ab\"\n\".*\"\n\"aab\"\n\"c*a*b\"\n\"mississippi\"\n\"mis*is*p*.\""
  },
  "11": {
    "name": "maxArea",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,8,6,2,5,4,8,3,7]\n[1,1]\n[4,3,2,1,4]\n[1,2,1]"
  },
  "12": {
    "name": "intToRoman",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n4\n9\n58\n1994"
  },
  "13": {
    "name": "romanToInt",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"III\"\n\"IV\"\n\"IX\"\n\"LVIII\"\n\"MCMXCIV\""
  },
  "14": {
    "name": "longestCommonPrefix",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]"
  },
  "15": {
    "name": "threeSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 3,
      "dealloc": true
    },
    "exampleTestcases": "[-1,0,1,2,-1,-4]\n[]\n[0]"
  },
  "16": {
    "name": "threeSumClosest",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-1,2,1,-4]\n1"
  },
  "17": {
    "name": "letterCombinations",
    "params": [
      {
        "name": "digits",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"23\"\n\"\"\n\"2\""
  },
  "18": {
    "name": "fourSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 4,
      "dealloc": true
    },
    "exampleTestcases": "[1,0,-1,0,-2,2]\n0\n[]\n0"
  },
  "19": {
    "name": "removeNthFromEnd",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1]\n1\n[1,2]\n1"
  },
  "20": {
    "name": "isValid",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"()\"\n\"()[]{}\"\n\"(]\"\n\"([)]\"\n\"{[]}\""
  },
  "21": {
    "name": "mergeTwoLists",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,4]\n[1,3,4]\n[]\n[]\n[]\n[0]"
  },
  "22": {
    "name": "generateParenthesis",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "3\n1"
  },
  "23": {
    "name": "mergeKLists",
    "params": [
      {
        "name": "lists",
        "type": "ListNode[]",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[[1,4,5],[1,3,4],[2,6]]\n[]\n[[]]"
  },
  "24": {
    "name": "swapPairs",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4]\n[]\n[1]"
  }
}